import io
import socket
import struct
import time
import picamera
import sys
import tkinter as tk
from tkinter import messagebox
import cv2
import os
from PIL import Image
import threading
from picamera import PiCamera
from picamera.array import PiRGBArray
import time
import numpy


client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client_socket.connect(('192.168.1.176',9000))
face_casade=cv2.CascadeClassifier('/home/pi/Documents/haarcascade_frontalface_alt.xml')
recognizer =cv2.face.LBPHFaceRecognizer_create()
fontface=cv2.FONT_HERSHEY_SIMPLEX


window=tk.Tk()
window.title("Face recognition system")

l1=tk.Label(window,text="Id",font=("Helvetica",20))
l1.grid(column=0, row=0)
t1=tk.Entry(window,width=50,bd=5)
t1.grid(column=1, row=0)

l2=tk.Label(window,text="Name",font=("Helvetica",20))
l2.grid(column=0, row=1)
t2=tk.Entry(window,width=50,bd=5)
t2.grid(column=1, row=1)

l3=tk.Label(window,text="Mail",font=("Helvetica",20))
l3.grid(column=0, row=2)
t3=tk.Entry(window,width=50,bd=5)
t3.grid(column=1, row=2)

l4=tk.Label(window,text="Address",font=("Helvetica",20))
l4.grid(column=0, row=3)
t4=tk.Entry(window,width=50,bd=5)
t4.grid(column=1, row=3)


        


check=0
atten=''
def recv_name():  
    global atten
    global check
    check=0
    while True:
        if check==1:
            print(check)
            check=0
            break
        Response1 = client_socket.recv(1024)
        atten=Response1.decode('utf-8')
        print("aaaa")
    

        print(Response1.decode('utf-8'))    

def detect_face():
    global atten
    global check
    Input = "B"
    client_socket.send(str.encode(Input))
    print("sent")
    i=0
    l=0
    while True:
        print("sent1")
        Response = client_socket.recv(1024)
        print("waiting")
        if Response.decode('utf-8')=="B":           
            connection = client_socket.makefile('wb')
            print(Response.decode('utf-8'))
            thread = threading.Thread(target=recv_name, args=())
            thread.start()
            
            with picamera.PiCamera() as camera:
                camera.resolution = (640, 480)
                time.sleep(2)
                stream = io.BytesIO()        
                for foo in camera.capture_continuous(stream, 'jpeg',use_video_port=True):
                    image = Image.open(stream)
                    frame = cv2.cvtColor(numpy.array(image), cv2.COLOR_RGB2BGR)  
                    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                    faces=face_casade.detectMultiScale(gray)                                                                    
                    connection.write(struct.pack('<L', stream.tell()))	           
                    connection.flush()
                    stream.seek(0)
                    connection.write(stream.read())
                    stream.seek(0)
                    stream.truncate()     
                    for (x, y, w, h) in faces:
                        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 0, 225), 2) 
                        cv2.putText(frame,""+atten,(10,30),fontface,1,(0,255,0),2)
                        atten=''
                    cv2.imshow("Frame", frame)
                    key = cv2.waitKey(1) & 0xFF
                    if key == ord("q"):
                        check=1
                        i=1
                        time.sleep(2)
                        stream = io.BytesIO(b'hello')                                            
                        connection.write(struct.pack('<L', stream.tell()))           
                        connection.flush()
                        stream.seek(0)
                        connection.write(stream.read())
                        stream.seek(0)
                        stream.truncate()                                                     
                        break
                cv2.destroyAllWindows()    
                                   
                      
        if i==1:
            break       

b2=tk.Button(window,text="Detect the face",font=("Helvetica",20),bg='green',fg='white',command=detect_face)
b2.grid(column=0,row=4)
checkc3="pp"
def recv(client_socket):
    global checkc3
    while True:
        print('aa')
        Response1 = client_socket.recv(1024)
        if Response1.decode('utf-8')=="C3":
            checkc3="C3"
            break


def face_data():
    if t1.get()==''or t2.get()==''or t3.get()==''or t4.get()=='':
        messagebox.showinfo(title="Thong bao", message="nhap day du thong tin")
    else:
        Input = "C"
        client_socket.send(str.encode(Input))
        global checkc3
        i=0
        a=0
        b=0
        while True:
            print("sent1")
            Response = client_socket.recv(1024)
            print("waiting")
            if Response.decode('utf-8')=="C":           
                ip1=t1.get()
                ip2=t2.get()
                ip3=t3.get()
                ip4=t4.get()
                ip=ip1+'+'+ip2+'+'+ip3+'+'+ip4
                print(ip)
                client_socket.send(str.encode(ip))
            if Response.decode('utf-8')=="C1":  
                connection = client_socket.makefile('wb')
                print(Response.decode('utf-8'))
                thread = threading.Thread(target=recv, args=(client_socket,))
                thread.start()
                # checkc3="pp"
                try:               
                    with picamera.PiCamera() as camera:
                        camera.resolution = (640, 480)
                        time.sleep(2)
                        stream = io.BytesIO()        
                        t=0
                        for foo in camera.capture_continuous(stream, 'jpeg',use_video_port=True):                   
                            image = Image.open(stream)
                            frame = cv2.cvtColor(numpy.array(image), cv2.COLOR_RGB2BGR)  
                            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                            faces=face_casade.detectMultiScale(gray) 
                            print(type(faces))    
                            if len(faces)==0:
                                cv2.putText(frame,"khong nhan dang duoc khuon mat",(10,30),fontface,1,(0,255,0),2)
                                stream.seek(0)
                                stream.truncate()
                                # if not faces:   
                            else:
                                connection.write(struct.pack('<L', stream.tell()))	           
                                connection.flush()
                                stream.seek(0)
                                connection.write(stream.read())
                                stream.seek(0)
                                stream.truncate()
                            

                            for (x, y, w, h) in faces:
                                cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 0, 225), 2) 

                            cv2.imshow("Frame", frame)
                            key = cv2.waitKey(1) & 0xFF  

                            if key == ord("q"):
                                i=1
                                b=1
                                stream = io.BytesIO(b'hello')                                            
                                connection.write(struct.pack('<L', stream.tell()))           
                                connection.flush()
                                stream.seek(0)
                                connection.write(stream.read())
                                stream.seek(0)
                                stream.truncate()      
                                cv2.destroyAllWindows()                                                
                                break
                            t=t+1
                            print(t)
                            print(checkc3)
                            if checkc3=="C3":
                                b=1
                                a=1
                                cv2.destroyAllWindows()  
                                break                          
                except Exception:       
                    break  
            time.sleep(1)
            if b==1:
                connection1=client_socket
                connection1.send(str.encode("C31"))
                b=0
            if a==1:
                messagebox.showinfo(title="Thong bao", message="thanh cong")
                t1.delete("0",tk.END)
                t2.delete("0",tk.END)
                t3.delete("0",tk.END)
                t4.delete("0",tk.END)
                a=0
                break
            if i==1 :
                break 
                i=0
            if  Response.decode('utf-8')=="C2":
                messagebox.showinfo(title="Thong bao", message="id da ton tai moi nhap id khac")
                t1.delete("0",tk.END)
                t2.delete("0",tk.END)
                t3.delete("0",tk.END)
                t4.delete("0",tk.END)
                break
            checkc3="pp"    

b3=tk.Button(window,text="face data",font=("Helvetica",20),bg='pink',fg='black',command=face_data)
b3.grid(column=1,row=4)
def exit_form():
    window.destroy()
b4=tk.Button(window,text="Exit",font=("Helvetica",20),bg='red',fg='white',command=exit_form)
b4.grid(column=2,row=4)

window.geometry("700x200")
window.mainloop()





